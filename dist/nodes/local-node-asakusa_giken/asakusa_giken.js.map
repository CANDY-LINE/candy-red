{"version":3,"sources":["../../../src/nodes/local-node-asakusa_giken/asakusa_giken.es6.js"],"names":[],"mappings":";;;;;;;;;;;;;;;6BAM2B,kBAAkB;IAAjC,SAAS;6BACM,kBAAkB;IAAjC,SAAS;sBACA,WAAW;IAApB,GAAG;;qBAEA,UAAS,CAAG;AACzB,MAAI,CAAC,GAAG,GAAG,MAAM,CAAC,CAAG,CAAC,KAAK,CAAC;QACpB,CAAa,GACN,SADP,CAAa,CACL,CAAC;4BADT,CAAa,GAEf,CAAG,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,EAC7B,IAAI,QAAQ,GAAG,CAAC,QAAQ,EACxB,IAAI,KAAK,GAAG,CAAC,KAAK;KACnB;;AAEH,KAAG,MAAM,aAAa,CAAC,YAAY,EAAE,CAAa,CAAC,CAAA;;QAE7C,CAAe,GACR,SADP,CAAe,CACP,CAAC;4BADT,CAAe,GAEjB,CAAG,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,EAC7B,IAAI,UAAU,GAAG,CAAC,UAAU,EAC5B,IAAI,gBAAgB,GAAG,CAAC,UAAU,EAClC,IAAI,cAAc,GAAG,CAAG,MAAM,QAAQ,CAAC,IAAI,gBAAgB,CAAC,EAC5D,GAAG,WAAW,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,cAAc,QAAQ,EAAE,IAAI,cAAc,KAAK,EACpF,SAAS,MAAM,EAAE,IAAI,UAAU,EAAE,CAAG,CAAC,EACvC,IAAI,KAAK,GAAG,CAAC,KAAK;KACnB;;AAEH,KAAG,MAAM,aAAa,CAAC,eAAe,EAAE,CAAe,CAAC,CAAA;;QAElD,CAAa,GACN,SADP,CAAa,CACL,CAAC;4BADT,CAAa,GAEf,CAAG,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,EAC7B,IAAI,QAAQ,GAAG,CAAC,QAAQ,EACxB,IAAI,KAAK,GAAG,CAAC,KAAK;KACnB;;AAEH,KAAG,MAAM,aAAa,CAAC,YAAY,EAAE,CAAa,CAAC,CAAA;;QAE7C,CAAe,GACR,SADP,CAAe,CACP,CAAC;4BADT,CAAe,GAEjB,CAAG,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,EAC7B,IAAI,UAAU,GAAG,CAAC,UAAU,EAC5B,IAAI,gBAAgB,GAAG,CAAC,UAAU,EAClC,IAAI,cAAc,GAAG,CAAG,MAAM,QAAQ,CAAC,IAAI,gBAAgB,CAAC,EAC5D,GAAG,WAAW,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,cAAc,QAAQ,EAAE,IAAI,cAAc,KAAK,EACpF,SAAS,MAAM,EAAE,IAAI,UAAU,EAAE,CAAG,CAAC,EACvC,IAAI,KAAK,GAAG,CAAC,KAAK;KACnB;;AAEH,KAAG,MAAM,aAAa,CAAC,eAAe,EAAE,CAAe,CAAC,CAAA;GACzD,CAAC,CAAC;AAEH,SAAA,AAAI,CAAG,MAAM,GAIJ,CAAC,GAER,KAAA,CAAC,SAAM,CAAC,UAAA,CAAC;AACP,KAAG,IAAI,MAAM,CAAC,CAAG,EAAE,CAAC,2BAA2B,EAAE;AAAE,aAAO,CAAC;KAAE,CAAC,CAAC,CAAC;GACjE,CAAC,AACH,CAAA;CACF","file":"asakusa_giken.js","sourcesContent":["'use strict';\n/*\n * BLECAST_BL (BLE with Illuminance Sensor) node\n * BLECAST_TM (BLE with Temeprature Sensor) node\n */\n\nimport * as blecastBl from './lib/blecast_bl';\nimport * as blecastTm from './lib/blecast_tm';\nimport * as ble from './lib/ble';\n\nexport default function(RED) {\n  let p = ble.start(RED).then(() => {\n    class BlecastBlNode {\n      constructor(n) {\n        RED.nodes.createNode(this, n);\n        this.address = n.address;\n        this.uuid = n.uuid;\n      }\n    }\n    RED.nodes.registerType('BLECAST_BL', BlecastBlNode);\n\n    class BlecastBlInNode {\n      constructor(n) {\n        RED.nodes.createNode(this, n);\n        this.useString = n.useString;\n        this.blecastBlNodeId = n.blecastBl;\n        this.blecastBlNode = RED.nodes.getNode(this.blecastBlNodeId);\n        ble.registerIn(this, 'BLECAST_BL', this.blecastBlNode.address, this.blecastBlNode.uuid,\n          blecastBl.parse, this.useString, RED);\n        this.name = n.name;\n      }\n    }\n    RED.nodes.registerType('BLECAST_BL in', BlecastBlInNode);\n\n    class BlecastTmNode {\n      constructor(n) {\n        RED.nodes.createNode(this, n);\n        this.address = n.address;\n        this.uuid = n.uuid;\n      }\n    }\n    RED.nodes.registerType('BLECAST_TM', BlecastTmNode);\n\n    class BlecastTmInNode {\n      constructor(n) {\n        RED.nodes.createNode(this, n);\n        this.useString = n.useString;\n        this.blecastTmNodeId = n.blecastTm;\n        this.blecastTmNode = RED.nodes.getNode(this.blecastTmNodeId);\n        ble.registerIn(this, 'BLECAST_TM', this.blecastTmNode.address, this.blecastTmNode.uuid,\n          blecastTm.parse, this.useString, RED);\n        this.name = n.name;\n      }\n    }\n    RED.nodes.registerType('BLECAST_TM in', BlecastTmInNode);\n  });\n\n  if (RED.debug) {\n    // Should not return anything except for test\n    // since Node-RED tries to manipulate the return value unless it's null/undefined\n    // and TypeError will be raised in the end.\n    return p;\n  } else {\n    p.catch(e => {\n      RED.log.error(RED._('blecast_bl.errors.unknown', { error: e }));\n    });\n  }\n}\n"]}