{"version":3,"sources":["../../../../src/nodes/local-node-asakusa_giken/lib/ble.es6.js"],"names":[],"mappings":"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","file":"ble.js","sourcesContent":["'use strict';\n\nimport noble from 'noble';\nimport Promise from 'es6-promises';\nimport LRU from 'lru-cache';\n\nlet peripheralsIn = {};\nlet isScanning = false;\nlet isMonitoring = false;\nlet unknown = LRU({\n  max: 100,\n  maxAge: 1000 * 60 * 60\n});\n\n/**\n * Associate the given in-Node object with the BLE module.\n * @param n the in-Node object to be registered as a BLE node\n * @param categoryName the category name\n * @param address the ble address delimited by '-'\n * @param uuid the ble identifier (optional)\n * @param parse the parse function\n * @param useString whether or not to use String type rather than JSON object as the payload format\n * @param RED the initialized RED object\n * @return void (sync)\n */\nexport function registerIn(n, categoryName, address, uuid, parse, useString, RED) {\n  if (!n || !categoryName || !address || !parse) {\n    throw new Error('Invalid node!');\n  }\n  if (!RED) {\n    throw new Error('RED is required!!');\n  }\n  let category = peripheralsIn[categoryName];\n  if (!category) {\n    category = {};\n    peripheralsIn[categoryName] = category;\n  }\n  let ary = [];\n  if (address in category) {\n    ary = category[address];\n    ary = ary.filter(ele => {\n      if (RED.nodes.getNode(ele.id)) {\n        return (ele.id !== n.id);\n      }\n      return false;\n    });\n  }\n  ary.push({\n    id: n.id,\n    parse: parse,\n    useString: useString\n  });\n  category[address] = ary;\n  if (uuid) {\n    category[uuid] = category[address];\n    RED.log.info(`[BLE] category=[${categoryName}], address=[${address}], uuid=[${uuid}], node ID=[${n.id}] has been registered.`);\n  } else {\n    RED.log.info(`[BLE] category=[${categoryName}], address=[${address}], node ID=[${n.id}] has been registered.`);\n  }\n}\n\n/**\n * Stop the BLE module immediately.\n * @param RED the initialized RED object\n * @return void (sync)\n */\nexport function stop(RED) {\n  noble.stopScanning();\n  isScanning = false;\n  if (RED && RED._) {\n    RED.log.info(RED._('asakusa_giken.message.stop-scanning'));\n  }\n}\n\n/**\n * Start the BLE module.\n * @param RED the initialized RED object\n * @return Promise\n */\nexport function start(RED) {\n  if (!RED) {\n    throw new Error('RED is required!');\n  }\n  let handlers = RED.settings.exitHandlers;\n  if (handlers && handlers.indexOf(stop) < 0) {\n    handlers.push(stop);\n  } else {\n    handlers = [stop];\n    RED.settings.exitHandlers = handlers;\n  }\n  return new Promise(resolve => {\n    if (isScanning) {\n      return resolve();\n    }\n    noble.on('stateChange', state => {\n      if (state === 'poweredOn') {\n        if (!isScanning) {\n          RED.log.info(RED._('asakusa_giken.message.start-scanning'));\n          noble.startScanning([], true);\n          isScanning = true;\n        }\n      } else {\n        noble.stopScanning();\n        isScanning = false;\n      }\n    });\n    if (!isScanning && noble.state === 'poweredOn') {\n      RED.log.info(RED._('asakusa_giken.message.start-scanning'));\n      noble.startScanning([], true);\n      isScanning = true;\n    }\n    resolve();\n  }).then(() => {\n    return new Promise(resolve => {\n      if (isMonitoring) {\n        return resolve();\n      }\n      isMonitoring = true;\n      noble.on('discover', peripheral => {\n        let adv = peripheral.advertisement;\n        if (!adv.localName) {\n          return;\n        }\n        // Remove a NULL terminator\n        let categoryName = adv.localName.replace(new RegExp('\\0', 'g'), '');\n        // look up a category by the category name\n        let category = peripheralsIn[categoryName];\n        if (!category) {\n          let key = categoryName + ':' + peripheral.address + ':' + peripheral.uuid;\n          if (!unknown.get(key)) {\n            unknown.set(key, 1);\n            RED.log.warn(RED._('asakusa_giken.errors.unknown-peripheral',\n              { categoryName: categoryName, peripheralAddress: peripheral.address, peripheralUuid: peripheral.uuid }));\n          }\n          return;\n        }\n        // check if the peripheral.address matches\n        let address = peripheral.address;\n        let uuid = null;\n        let bleNodes = null;\n        if (address === 'unknown') {\n          uuid = peripheral.uuid;\n          bleNodes = category[uuid];\n          if (!bleNodes || bleNodes.length === 0) {\n            let key = categoryName + ':' + uuid;\n            if (!unknown.get(key)) {\n              unknown.set(key, 1);\n              RED.log.warn(RED._('asakusa_giken.errors.unknown-uuid',\n                { categoryName: categoryName, peripheralUuid: uuid }));\n            }\n            return;\n          }\n        }\n        if (!uuid) {\n          if (address.indexOf('-') >= 0) {\n            address = address.replace(new RegExp('-', 'g'), ':');\n          }\n          bleNodes = category[address];\n          if (!bleNodes || bleNodes.length === 0) {\n            let key = categoryName + ':' + address;\n            if (!unknown.get(key)) {\n              unknown.set(key, 1);\n              RED.log.warn(RED._('asakusa_giken.errors.unknown-address',\n                { categoryName: categoryName, peripheralAddress: address }));\n            }\n            return;\n          }\n        }\n        // send the ble node a payload if the address exists\n        let removed = false;\n        bleNodes = bleNodes.filter(ele => {\n          let node = RED.nodes.getNode(ele.id);\n          if (!node) {\n            removed = true;\n            return false;\n          }\n          let payload = ele.parse(adv.manufacturerData);\n          payload.tstamp = Date.now();\n          payload.rssi = peripheral.rssi;\n          payload.address = address;\n          if (uuid) {\n            payload.uuid = uuid;\n          }\n          if (ele.useString) {\n            payload = JSON.stringify(payload);\n          }\n          node.send({'payload': payload});\n          return true;\n        });\n        if (removed) {\n          category[uuid] = bleNodes;\n          if (address !== 'unknown') {\n            category[address] = bleNodes;\n          }\n        }\n      });\n      resolve();\n      RED.log.info(RED._('asakusa_giken.message.setup-done'));\n    });\n  });\n}\n"]}