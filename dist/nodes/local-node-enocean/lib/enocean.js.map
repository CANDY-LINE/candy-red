{"version":3,"sources":["../../../../src/nodes/local-node-enocean/lib/enocean.es6.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;2BAMyB,cAAc;;gCACS,oBAAoB;2BAChD,cAAc;;kBACnB,IAAI;;wBACH,WAAW;;IAEvB,OAAO,GAAG,2BAAI;AAChB,OAAK,GAAG;AACR,UAAQ,OAAc;CACvB,CAAC;IAEI,mBAAmB,GAAG;AAC1B,MAAI,2CAAyB;CAC9B;IAEK,UAAU;AACH,WADP,CAAU,CACF,CAAG;0BADX,CAAU,GAEZ,IAAI,IAAI,GAAG,CAAG;GACf;;sBAHG,CAAU;;WAKT,UAAC,CAAI;AACR,aAAO,6BAAY,UAAC,CAAO,EAAE,CAAM;AACjC,YAAI,CAAgB,GAAG,mBAAmB,CAAC,CAAI,WAAW,CAAC,CAAC;AAC5D,YAAI,CAAgB,EAClB,CAAO,CAAC;AACN,kBAAQ,CAAgB;AACxB,mBAAS,CAAI,QAAQ;SACtB,CAAC,CAAC,KACE;AACL,cAAI,CAAC,GAAG,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;AAC1D,WAAC,WAAW,GAAG,CAAI,WAAW,EAC9B,CAAM,CAAC,CAAC,CAAC,AADqB,CAAA;SAE/B;OACF,CAAC,CAAC;KACJ;OAnBG,CAAU;;IAsBH,UAAU;AACV,WADA,CAAU,CACT,CAAG;0BADJ,CAAU,GAEnB,IAAI,KAAK,GAAG,EAAE,EACd,IAAI,WAAW,GAAG,IAAI,UAAU,CAAC,CAAG,CAAC,EACrC,IAAI,WAAW,GAAG,kCAAgB,EAClC,IAAI,IAAI,GAAG,CAAG;GACf;;sBANU,CAAU;;WAQlB,UAAC,CAAe;AACjB,UAAI,CAAI,GAAG,IAAI;UACX,CAAQ,GAAG,CAAe,WAAW,CADzB;AAEhB,UAAI,CAAC,CAAQ,EACX,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC,AACpD;AACD,UAAI,CAAC,0BAAa,CAAC,CAAQ,CAAC,EAC1B,MAAM,IAAI,KAAK,gBAAc,CAAQ,qBAAkB,CAAC,AACzD;AACD,UAAI,CAAI,KAAK,CAAC,CAAQ,CAAC,EACrB,MAAM,IAAI,KAAK,uBAAqB,CAAQ,qBAAkB,CAAC,AAChE;AACD,UAAI,CAAI,GAAG,+BAAc,CAAC;AAC1B,OAAI,OAAO,CAAC,CAAQ,CAAC,EACrB,CAAI,GAAG,CAAC,MAAM,EAAE,UAAA,CAAI;AAClB,SAAI,WAAW,MAAM,CAAC,CAAI,CAAC,KAAK,CAAC,UAAA,CAAM;AACrC,WAAM,OAAO,MAAM,CAAC,CAAM,QAAQ,CAAC,KAAK,CAAC,UAAA,CAAG;AAC1C,aAAI,WAAW,MAAM,CAAC,CAAG,CAAC,KAAK,CAAC,UAAA,CAAG;AACjC,kBAAI,CAAY,GAAG,CAAG,aAAa,CAAC;AACpC,AAAK,eAAI,KAAK,UAAQ,CAAY,EAAI,CAAG,CAAC,IACnC,OAAO,IAAI,CAAC,CAAY,CAAC,AADU,KAEtC,OAAO,IAAI,CAAC,CAAY,EAAE,CAAC,CAAC,EAC5B,CAAI,IAAI,IAAI,KAAK,CAAC,CAAI,IAAI,EAAE,CAAC,qBAAqB,EAAE;AAAE,8BAAc,CAAY;eAAE,CAAC,CAAC,CADxD,AAG/B,CAAA;aACF,CAAC,SAAM,CAAC,UAAA,CAAC;AACR,eAAI,IAAI,IAAI,MAAM,CAAC,CAAI,IAAI,EAAE,CAAC,2BAA2B,EAAE;AAAE,uBAAO,CAAC;AAAE,sBAAM,IAAI,UAAU,CAAC,CAAG,CAAC;eAAE,CAAC,CAAC,CAAC;aACtG,CAAC,CAAC;WACJ,CAAC,SAAM,CAAC,UAAA,CAAC;AACR,aAAI,IAAI,IAAI,MAAM,CAAC,CAAI,IAAI,EAAE,CAAC,2BAA2B,EAAE;AAAE,qBAAO,CAAC;AAAE,oBAAM,CAAM,QAAQ;aAAE,CAAC,CAAC,CAAC;WACjG,CAAC,CAAC;SACJ,CAAC,SAAM,CAAC,UAAA,CAAC;AACR,AAAI,WAAC,YAAY,KAAK,IAAI,AAAc,oCAAoC,KAAlD,CAAC,QAAQ,AAAyC,GAC1E,CAAI,IAAI,IAAI,KAAK,CAAC,CAAI,IAAI,EAAE,CAAC,oCAAoC,EAAE;AAAE,wBAAY,CAAC,WAAW;WAAE,CAAC,CAAC,GAEjG,CAAI,IAAI,IAAI,MAAM,CAAC,CAAI,IAAI,EAAE,CAAC,2BAA2B,EAAE;AAAE,mBAAO,CAAC;AAAE,kBAAM,IAAI,UAAU,CAAC,CAAI,CAAC;WAAE,CAAC,CAAC,AACtG,CAAA;SACF,CAAC,CAAC;OACJ,CAAC,EACF,CAAI,GAAG,CAAC,OAAO,EAAE,UAAA,CAAC;AAChB,SAAI,IAAI,IAAI,MAAM,CAAC,CAAI,IAAI,EAAE,CAAC,gCAAgC,EAAC;AAAE,iBAAO,CAAC;SAAE,CAAC,CAAC,EAC7E,OAAO,CAAI,KAAK,CAAC,CAAQ,CAAC,AADmD,CAAA;OAE9E,CAAC,EACF,CAAI,GAAG,CAAC,OAAO,EAAE;AACf,SAAI,IAAI,IAAI,KAAK,CAAC,CAAI,IAAI,EAAE,CAAC,+BAA+B,EAAC;AAAE,oBAAU,CAAQ;SAAE,CAAC,CAAC,EACrF,OAAO,CAAI,KAAK,CAAC,CAAQ,CAAC,AAD2D,CAAA;OAEtF,CAAC,EACF,CAAI,KAAK,CAAC,CAAQ,CAAC,GAAG;AACpB,cAAM,CAAe;AACrB,cAAM,CAAI;OACX,EACD,CAAI,IAAI,IAAI,KAAK,CAAC,CAAI,IAAI,EAAE,CAAC,8BAA8B,EAAC;AAAE,kBAAU,CAAQ;OAAE,CAAC,CAAC,AAtC/D,CAAA;KAuCtB;;;WAEE,UAAC,CAAQ;AACV,UAAI,CAAI,GAAG,IAAI;UACX,CAAO,GAAG,CAAI,KAAK,CAAC,CAAQ,CAAC,CADjB;AAEhB,UAAI,CAAC,CAAO,EACV,MAAM,IAAI,KAAK,qBAAmB,CAAQ,kBAAe,CAAC,AAC3D;AACD,aAAO,CAAO,CAAC;KAChB;;;WAEI,UAAC,CAAQ;AACZ,UAAI,CAAI,GAAG,IAAI;UACX,CAAO,GAAG,CAAI,KAAK,CAAC,CAAQ,CAAC,CADjB;AAEhB,aAAO,6BAAY,UAAA,CAAO;AACxB,AAAI,SAAO,IACT,OAAO,CAAI,KAAK,CAAC,CAAQ,CAAC,EAC1B,CAAO,KAAK,MAAM,CAAC;AACjB,WAAO,EAAE,CAAC;SACX,CAAC,CAHwB,GAK1B,CAAO,EAAE,AACV,CAAA;OACF,CAAC,CAAC;KACJ;OApFU,CAAU","file":"enocean.js","sourcesContent":["'use strict';\n\n/*\n * EnOcean Module\n */\n\nimport setUpEnocean from 'node-enocean';\nimport { ESP3RadioERP2Parser, ERP2Parser } from './esp3_erp2_parser';\nimport Promise from 'es6-promises';\nimport fs from 'fs';\nimport LRU from 'lru-cache';\n\nlet unknown = LRU({\n  max: 100,\n  maxAge: 1000 * 60 * 60\n});\n\nconst ESP3_PACKET_PARSERS = {\n  10: new ESP3RadioERP2Parser() // Packet Type 10: RADIO_ERP2\n};\n\nclass ESP3Parser {\n  constructor(RED) {\n    this.RED = RED;\n  }\n  \n  parse(data) {\n    return new Promise((resolve, reject) => {\n      let esp3PacketParser = ESP3_PACKET_PARSERS[data.packetType];\n      if (esp3PacketParser) {\n        resolve({\n          parser: esp3PacketParser,\n          payload: data.rawByte\n        });\n      } else {\n        let e = new Error('enocean.errors.unsupportedPacketType');\n        e.packetType = data.packetType;\n        reject(e);\n      }\n    });\n  }\n}\n\nexport class SerialPool {\n  constructor(RED) {\n    this.pool = {};\n    this.esp3Parser = new ESP3Parser(RED);\n    this.erp2Parser = new ERP2Parser();\n    this.RED = RED;\n  }\n\n  add(enOceanPortNode) {\n    let that = this;\n    let portName = enOceanPortNode.serialPort;\n    if (!portName) {\n      throw new Error('serialPort proeprty is missing!');\n    }\n    if (!fs.existsSync(portName)) {\n      throw new Error(`The port [${portName}] is NOT ready!`);\n    }\n    if (that.pool[portName]) {\n      throw new Error(`The serial port [${portName}] is duplicate!`);\n    }\n    let port = setUpEnocean();\n    port.listen(portName);\n    port.on('data', data => {\n      that.esp3Parser.parse(data).then(result => {\n        result.parser.parse(result.payload).then(ctx => {\n          that.erp2Parser.parse(ctx).then(ctx => {\n            let originatorId = ctx.originatorId;\n            if (!port.emit(`ctx-${originatorId}`, ctx)) {\n              if (!unknown.get(originatorId)) {\n                unknown.set(originatorId, 1);\n                that.RED.log.warn(that.RED._('enocean.warn.noNode', { originatorId: originatorId }));\n              }\n            }\n          }).catch(e => {\n            that.RED.log.error(that.RED._('enocean.errors.parseError', { error: e, data: JSON.stringify(ctx) }));\n          });\n        }).catch(e => {\n          that.RED.log.error(that.RED._('enocean.errors.parseError', { error: e, data: result.payload }));\n        });\n      }).catch(e => {\n        if (e instanceof Error && e.message === 'enocean.info.unsupportedPacketType') {\n          that.RED.log.info(that.RED._('enocean.info.unsupportedPacketType', { packetType: e.packetType }));\n        } else {\n          that.RED.log.error(that.RED._('enocean.errors.parseError', { error: e, data: JSON.stringify(data) }));\n        }\n      });\n    });\n    port.on('error', e => {\n      that.RED.log.error(that.RED._('enocean.errors.serialPortError',{ error: e }));\n      delete that.pool[portName];\n    });\n    port.on('close', () => {\n      that.RED.log.info(that.RED._('enocean.info.serialPortClosed',{ portName: portName }));\n      delete that.pool[portName];\n    });\n    that.pool[portName] = {\n      node: enOceanPortNode,\n      port: port\n    };\n    that.RED.log.info(that.RED._('enocean.info.serialPortAdded',{ portName: portName }));\n  }\n  \n  get(portName) {\n    let that = this;\n    let enocean = that.pool[portName];\n    if (!enocean) {\n      throw new Error(`The given port ${portName} is missing!`);\n    }\n    return enocean;\n  }\n  \n  close(portName) {\n    let that = this;\n    let enocean = that.pool[portName];\n    return new Promise(resolve => {\n      if (enocean) {\n        delete that.pool[portName];\n        enocean.port.close(() => {\n          resolve();\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n}\n"]}